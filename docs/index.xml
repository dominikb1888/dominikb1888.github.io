<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dominik Böhler</title>
    <link>https://dominikboehler.de/</link>
    <description>Recent content on Dominik Böhler</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>info@dominikboehler.de (Dominik Böhler)</managingEditor>
    <webMaster>info@dominikboehler.de (Dominik Böhler)</webMaster>
    <copyright>Dominik Boehler</copyright><atom:link href="https://dominikboehler.de/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>About</title>
      <link>https://dominikboehler.de/about/</link>
      <pubDate>Tue, 02 Mar 2021 10:59:29 +0100</pubDate>
      <author>info@dominikboehler.de (Dominik Böhler)</author>
      <guid>https://dominikboehler.de/about/</guid>
      <description>Digital, Health, and Entrepreneurship I am a professor for digital health, business angel, and strategic advisor. I support digital health entrepreneurs in the Munich ecosystem (and beyond). Here you will find my thoughts on current issues in the entrepreneurial ecosystem, novel approaches in digital healthcare, and lots of discoveries I make on the way.
Feel free reach out to me on other platforms:
 Twitter: twitter.com/dominikb1888 LinkedIN: linkedin.com/in/dominikb1888  Digital Health Digital Health transforms Channels, Value Chains, Products, and Financial Models in healthcare.</description>
    </item>
    
    <item>
      <title>Legal Notice</title>
      <link>https://dominikboehler.de/legal-notice/</link>
      <pubDate>Tue, 02 Mar 2021 10:59:29 +0100</pubDate>
      <author>info@dominikboehler.de (Dominik Böhler)</author>
      <guid>https://dominikboehler.de/legal-notice/</guid>
      <description>Accountability for linksResponsibility for the content of external links (to web pages of third parties) lies solely with the operators of the linked pages. No violations were evident to us at the time of linking. Should any legal infringement become known to us, we will remove the respective link immediately.CopyrightOur web pages and their contents are subject to German copyright law. Unless expressly permitted by law, every form of utilizing, reproducing or processing works subject to copyright protection on our web pages requires the prior consent of the respective owner of the rights.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://dominikboehler.de/1/01/refactoring-post-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>info@dominikboehler.de (Dominik Böhler)</author>
      <guid>https://dominikboehler.de/1/01/refactoring-post-1/</guid>
      <description>Stage 1 - Understand the objectives and making it DRY After cleaning the direct and obvious formal flaws from the code (Indenting according to PEP8 with 4 Spaces and an unused variable: https://www.python.org/dev/peps/pep-0008/), it is about understanding the business objectives of the code and understanding what is a repetition and what is potentially business logic, i.e. unclean, but still intended.
Business Logic DRYing up on block level The code is Class with @staticmethod decorators, this means that we do not need to create an object to access the class methods.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://dominikboehler.de/1/01/comment_1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>info@dominikboehler.de (Dominik Böhler)</author>
      <guid>https://dominikboehler.de/1/01/comment_1/</guid>
      <description>Stage 1 - Understand the objectives and making it DRY After cleaning the direct and obvious formal flaws from the code (Indenting according to PEP8 with 4 Spaces and an unused variable: https://www.python.org/dev/peps/pep-0008/), it is about understanding the business objectives of the code and understanding what is a repetition and what is potentially business logic, i.e. unclean, but still intended.
Business Logic DRYing up on block level The code is Class with @staticmethod decorators, this means that we do not need to create an object to access the class methods.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://dominikboehler.de/1/01/refactoring-post-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>info@dominikboehler.de (Dominik Böhler)</author>
      <guid>https://dominikboehler.de/1/01/refactoring-post-2/</guid>
      <description>The cleaning story continued - Built-Ins are coming! In the first post, we looked at cleaning our code on the block level. We identified two import blocks we moved to a separate function, several similar blocks of mappings we replaced with a for loop.
In this post, we will look at the next level of granularity. We will check the code for further repetitions and see where code style can be improved to become less imperative.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://dominikboehler.de/1/01/comment_2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>info@dominikboehler.de (Dominik Böhler)</author>
      <guid>https://dominikboehler.de/1/01/comment_2/</guid>
      <description>The cleaning story continued - Built-Ins are coming! In the first post, we looked at cleaning our code on the block level. We identified two import blocks we moved to a separate function, several similar blocks of mappings we replaced with a for loop.
In this post, we will look at the next level of granularity. We will check the code for further repetitions and see where code style can be improved to become less imperative.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://dominikboehler.de/1/01/refactoring-post-3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>info@dominikboehler.de (Dominik Böhler)</author>
      <guid>https://dominikboehler.de/1/01/refactoring-post-3/</guid>
      <description>From chaos to code - Embeding Type Checking, Exensibility, and Security In our previous posts we went through a horrible piece of code and cleaned it (DRY principle) and create a stronger OOP logic. In itself the code is good and clean. Still it has substantial flaws, if we look at it from the outside. What happens, if we would like to employ a different search strategy but a union search on all options?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://dominikboehler.de/1/01/comment_3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>info@dominikboehler.de (Dominik Böhler)</author>
      <guid>https://dominikboehler.de/1/01/comment_3/</guid>
      <description>From chaos to code - Embeding Type Checking, Exensibility, and Security In our previous posts we went through a horrible piece of code and cleaned it (DRY principle) and create a stronger OOP logic. In itself the code is good and clean. Still it has substantial flaws, if we look at it from the outside. What happens, if we would like to employ a different search strategy but a union search on all options?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://dominikboehler.de/1/01/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>info@dominikboehler.de (Dominik Böhler)</author>
      <guid>https://dominikboehler.de/1/01/readme/</guid>
      <description>Python Instructions  run tests with python test.py refactor the FundingRaised class in funding_raised.py, making sure to:  DRY up duplicated improve method &amp;amp; variable name improve readability and maintainability   ensure tests continue to pass  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://dominikboehler.de/1/01/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>info@dominikboehler.de (Dominik Böhler)</author>
      <guid>https://dominikboehler.de/1/01/readme/</guid>
      <description>Refactoring Exercise Goal Here&amp;rsquo;s some really bad code! It is (intentionally) bad, with lots of duplicated/copied and pasted code, improper use of method/classes, bad naming of variables and methods, etc. The only good thing about this code is the tests, which will help guide you through the exercise and ensure that the interface/functionality of the code remains intact with your refactor.
Feel free to create new classes, helper methods, etc as you see fit.</description>
    </item>
    
  </channel>
</rss>
